1:
  status: observed
  argument: User only communicates with the Nginx proxy, that acts proxies all requests.
  artifacts:
    - file: web-application/docker/Dockerfile
      lines: [23]

2:
  status: disregarded
  argument: The services do not authenticate requests mutually. No client authentication is configured and no authentication header is used.

3:
  status: disregarded
  argument: No authentication mechanism is deployed.

4:
  status: disregarded
  argument: External entities are not represented in the application. Users behave transparent to the server.

5:
  status: disregarded
  argument: No authentication tokens are used.

6:
  status: disregarded
  argument: No rate limiting of any means is deployed.

7:
  status: disregarded
  argument: User external entities can call the gateway service using an unencrypted HTTP connection.

8:
  status: disregarded
  argument: All internal services communicate over insecure HTTP connections.
  artifacts:
    - file: web-application/src/app/service/gateway/gateway.service.ts
      lines: [13]

9:
  status: observed
  argument: This microservice application deploys the ELK stack (Elasticsearch, Logstash, Kibana) as a logging mechanism. Logstash is deployed as a central logging subsystem. Logstash then sends the formatted data to an Elasticsearch indexing server. Additionally Kibana is deployed as a monitoring dashboard on top of the indexing server.
  artifacts:
    - file: build/docker/docker-compose.yml
      lines: [214, 233, 261]

10:
  status: observed
  argument: Both service containers and the API gateway deploy local logging agents. The services use logback as a local logging agent to send the collected log files from the spring servers to the central logstash server.
  artifacts:
    - file: api-gateway/src/main/resources/logback.xml
      lines: [23]
    - file: service-one/src/main/resources/logback-spring.xml
      lines: [20]
    - file: service-two/src/main/resources/logback-spring.xml
      lines: [20]

11:
  status: disregarded
  argument: No explicit log sanitization is deployed. Even though no API keys or PII are written to any log in this application, this rule is still considered disregarded because the string data sent via RabbitMQ is directly logged without local checking (see exemplary artifacts).
  artifacts:
    - file: service-one/src/main/java/com/mudigal/one/service/impl/ServiceOneRabbitMessageConsumer.java
      lines: [40]
    - file: service-two/src/main/java/com/mudigal/two/service/impl/ServiceTwoRabbitMessageConsumer.java
      lines: [38]

12:
  status: disregarded
  argument: The communication between logging agents is not brokered by any message broker. The deployed RabbitMQ broker only handles service queues, not logging calls. The logs are not encrypted during transmission and not mutually authenticated, nor is any availability ensured apart from container startup dependencies.
  artifacts:
    - file: api-gateway/src/main/resources/logback.xml
      lines: [23]

13:
  status: disregarded
  argument: No explicit circuit breaker is deployed.

14:
  status: observed
  argument: The Zuul API gateway performs load balancing using Ribbon by default.
  artifacts:
    - file: api-gateway/src/main/java/com/mudigal/ApiGatewayApplication.java
      lines: [17]

15:
  status: not applicable
  argument: Not a service mesh deployment.

16:
  status: observed
  argument: Consul is deployed as a service registry.
  artifacts:
    - file: webservice-registry/src/main/java/com/anilallewar/microservices/registry/RegistryApplication.java
      lines: [19]

17:
  status: disregarded
  argument: Registration with the Consul server is not secured using access tokens or access control lists.
  artifacts:
    - file: build/docker/docker-compose.yml
      lines: [156, 166, 179]
    - file: service-one/src/main/resources/application.yml
      lines: [50]

18:
  status: disregarded
  argument: No secret manager is deployed. Passwords are either deployed in plaintext in the Docker Compose configuration or in the Spring Boot configuration.
  artifacts:
    - file: build/docker/docker-compose.yml
      lines: [52, 94, 97, 141]
    - file: service-one/src/main/resources/application.yml
      lines: [64]
    - file: service-two/src/main/resources/application.yml
      lines: [46, 74, 85]
